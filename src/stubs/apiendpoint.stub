<?php

namespace App\Http\API;

use Illuminate\Http\Request;
use CloudMonitor\APIFlow\APIController;

class {NAME} extends APIController
{
    /**
     * Search query database columns.
     * 
     * @var array
     */
    protected $queryColumns = [];

    /**
     * Model scopes exposed to the API.
     * 
     * @var array
     */
    protected $scopes = [];

    /**
     * Related models API can include.
     * 
     * @var array
     */
    protected $withRelations = [];

    /**
     * Order by columns.
     *
     * @var null|array
     */
    protected $orderBy = null;

    /**
     * Create the controller instance.
     *
     * @param array $params
     * @return void
     */
    public function __construct($params = [])
    {
        parent::__construct($params);
        $this->authorizeResource(parent::model(), parent::parameter());
    }

    /**
     * Display a listing of the resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function index()
    {
        return parent::many();
    }

    /**
     * Store a newly created resource in storage.
     *
     * @param  \Illuminate\Http\Request  $request
     * @return \Illuminate\Http\Response
     */
    public function store(Request $request)
    {
        parent::make($request);
    }

    /**
     * Display the specified resource.
     *
     * @param  {MODEL}  ${model}
     * @return \Illuminate\Http\Response
     */
    public function show({MODEL} ${model})
    {
        return parent::one(${model});
    }

    /**
     * Update the specified resource in storage.
     *
     * @param  \Illuminate\Http\Request  $request
     * @param  {MODEL}  ${model}
     * @return \Illuminate\Http\Response
     */
    public function update(Request $request, {MODEL} ${model})
    {
        return parent::change(${model}, $request);
    }

    /**
     * Remove the specified resource from storage.
     *
     * @param  {MODEL}  ${model}
     * @return \Illuminate\Http\Response
     */
    public function destroy({MODEL} ${model})
    {
        return parent::delete(${model});
    }
}
